#!/bin/bash

### This Git method script pulls all new commits, branches and tags from all
### known remote sources, and attempts fast-forward merges of the current
### workspace with its more up-to-date remote counterparts.
### Script Copyright (C) 2014-2015 by Jim Klimov, License: MIT
### Pieces probably inspired by various posts from Stack Overflow

git_pull-ff() {

currentbranchref="$(git symbolic-ref HEAD 2>&-)"
currentbranch="`git branch | grep '^* ' | sed 's,^* ,,'`" || \
	currentbranch=""

#git pull $currentbranch
#git pull --tags $currentbranch
git pull --all
git fetch --tags

BREAK=no
trapbreak() {
    if [ "$BREAK" = yes ] ; then
        echo "Stopping due to multiple breaks..."
        if [ x"$currentbranch" != x -a "$currentbranch" != master ]; then
            echo "Trying to return to branch $currentbranch..."
            git checkout $currentbranch
            git branch
        fi
        exit 1
    fi >&2

    echo 'Got stop signal, please wait until the end of critical section' >&2
    BREAK=yes
}

checkbreak() {
    [ "$BREAK" = yes ] && echo "Stopping due to break" && exit 1
    return 0
}

git branch -r | grep -v ' -> ' | while read remotebranch
do
    # Split <remote>/<branch> into remote and branchref parts
    remote="${remotebranch%%/*}"
    branchref="refs/heads/${remotebranch#*/}"

    if [ "$branchref" == "$currentbranchref" ]
    then
        echo "Updating current branch $branchref from $remote..."
        git pull --ff-only
    else
        echo "Updating non-current ref $branchref from $remote..."
        git fetch "$remote" "$branchref:$branchref"
    fi
done

echo  "NOTE: Setting trap to avoid bad breakage (current-branch mismatch) on Ctrl+C"
trap "trapbreak" 1 2 3 15

git checkout master && \
git pull --ff-only --all
#git pull --ff-only master && \
#git pull --ff-only --all

[ x"$currentbranch" != x -a "$currentbranch" != master ] && \
    git checkout $currentbranch && \
    git pull --ff-only --all
#    git pull --ff-only $currentbranch && \
#    git pull --ff-only --all

echo "DONE!"
[ x"$currentbranch" != x ] && \
    echo "Started repo '`pwd`' from branch '$currentbranch'... still there?"
git branch

echo "NOTE: Clearing the trap for critical segment"
trap "" 1 2 3 15

git pull
}

git_pull-ff

